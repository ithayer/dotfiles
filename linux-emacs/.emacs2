(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(browse-url-browser-function (quote browse-url-firefox))
 '(org-agenda-files (quote ("~/.notes")))
 '(py-python-command-args (quote ("-i")))
 '(recentf-max-saved-items 100)
 '(tool-bar-mode nil)
 '(transient-mark-mode t))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "grey20" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :width normal :height 107 :family "misc-fixed"))))
 '(cursor ((t (:background "white"))))
 '(font-lock-constant-face ((((class color) (min-colors 88) (background dark)) (:foreground "red" :weight bold))))
 '(magit-diff-add ((t (:inherit diff-added :foreground "chartreuse"))))
 '(magit-diff-del ((t (:inherit diff-removed :foreground "orange red"))))
 '(magit-section-title ((t (:inherit magit-header :background "white" :foreground "black" :height 2.0)))))

(add-hook 'window-setup-hook
          (lambda ()
            (global-set-key (kbd "C-x C-c") (lambda () (interactive) (message "Quick exit disabled, try M-x kill-emacs")))))

(require 'uniquify)

(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "|")
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-ignore-buffers-re "^\\*")


(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t) (setq ido-create-new-buffer 'always)

(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 100)

(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(global-set-key (kbd "M-1") 'previous-multiframe-window)
(global-set-key (kbd "M-2") 'next-multiframe-window)

(global-set-key [insert] 'copy-region-as-kill)
(global-set-key [C-insert] 'yank)

(global-set-key (kbd "M-<f11>") 'compile)

(global-set-key (kbd "C-M-<up>") '(lambda () (interactive) (scroll-down 1)))
(global-set-key (kbd "C-M-<down>") '(lambda () (interactive) (scroll-up 1)))
(global-set-key (kbd "<kp-home>") 'kmacro-end-and-call-macro)

;; (global-set-key (kbd "<f12>") 'slime-eval-defun)
;; (global-set-key (kbd "C-<f12>") 'slime-repl-resend)
(global-set-key (kbd "<XF86Calculator>") 'revert-buffer)

(global-set-key (kbd "<kp-home>") 'call-last-kbd-macro)
;;(global-set-key (kbd "<kp-up>") 'slime-eval-defun)


(eval-after-load 'paredit
  '(progn
     (define-key paredit-mode-map (kbd "<M-left>") 'paredit-forward-barf-sexp)
     (define-key paredit-mode-map (kbd "<M-right>") 'paredit-forward-slurp-sexp)
     (define-key paredit-mode-map (kbd "<C-left>") 'backward-word)
     (define-key paredit-mode-map (kbd "<C-right>") 'forward-word)
     (define-key clojure-mode-map "{" 'paredit-open-curly)
     (define-key clojure-mode-map "}" 'paredit-close-curly)))

(add-hook 'clojure-mode-hook    'enable-paredit-mode)

(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)

(require 'nrepl)

(global-set-key (kbd "<XF86AudioPlay>") 'nrepl-eval-last-expression)
(global-set-key (kbd "C-<XF86AudioPlay>") 'nrepl-eval-buffer)


(defun insert-spy ()
  (interactive)
  (paredit-open-parenthesis)
  (paredit-forward-slurp-sexp)
  (insert "lg/spy "))

(global-set-key (kbd "<XF86Launch5>") 'insert-spy)

(defun insert-seq ()
  (interactive)
  (paredit-open-parenthesis)
  (paredit-forward-slurp-sexp)
  (insert "seq "))

(global-set-key (kbd "<XF86Launch6>") 'insert-seq)

(global-set-key (kbd "C-,") 'paredit-backward)
(global-set-key (kbd "C-.") 'paredit-forward)

(defun set-quick-bookmark ()
  (interactive)
  (bookmark-set "*1"))
(defun goto-quick-bookmark ()
  (interactive)
  (bookmark-jump "*1"))
(defun jump-to-require ()
  (interactive)
  (set-quick-bookmark)
  (search-backward ":require ")
  (forward-word)
  (forward-char))

(defun rs (x)
  (interactive "srfz-search: ")
  (grep (format "%s %s" "rfzsearch" x)))


(defun rfzsearch-with-symbol-at-point ()
  (interactive)
  (grep (format "%s %s" "rfzsearch" (symbol-at-point))))

(global-set-key (kbd "C-7") 'rfzsearch-with-symbol-at-point)


(global-set-key (kbd "C-8") 'cljr-add-require-to-ns)
(global-set-key (kbd "C-*") 'cljr-add-use-to-ns)
(global-set-key (kbd "C-9") 'jump-to-require)
(global-set-key (kbd "C-0") 'goto-quick-bookmark)


(require 'find-file-in-git-repo)


(global-set-key (kbd "<f6>") 'find-file-in-git-repo)

(add-hook 'clojure-mode-hook '(lambda ()
				(show-paren-mode)))

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq js-indent-level 2)

(setq-default truncate-lines t)

(add-to-list 'auto-mode-alist '("\\.tmpl\\'" . html-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . html-mode))

(setq-default indent-tabs-mode nil)

(setq-default js2-basic-offset 2)

(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

(add-hook 'nrepl-connected-hook 'paredit-mode)

(define-abbrev-table 'global-abbrev-table '(
	("afaict" "as far as I can tell" nil 1)
	("omuse" "http://www.emacswiki.org/cgi-bin/oddmuse.pl" nil 0)
	("btw" "by the way" nil 3)
	("wether" "whether" nil 5)
	("ewiki" "http://www.emacswiki.org/cgi-bin/wiki.pl" nil 3)
	("pov" "point of view" nil 1)
	("o1" "#(-> %)" (lambda () (backward-char)) 1)
	("00" "#(-> %)" "C-b" 1)
	))

(cljr-add-keybindings-with-prefix "C-c C-f")
(add-hook 'clojure-mode-hook (lambda () (yas/minor-mode 1)))
(require 'key-chord)

(defun write-lambda-string (s)
  (insert (format "#(-%s> %%)" s))
  (backward-char))

(key-chord-define-global "#>" (lambda () (interactive) (write-lambda-string "!")))
(key-chord-define-global "#<" (lambda () (interactive) (write-lambda-string "?")))


;(add-to-list 'load-path "~/.emacs.d/gh.el")


;(require 'rfz-clj-mode)

(require 'gh)

(global-set-key (kbd "M-g") 'magit-status)
(global-set-key (kbd "M-G") 'goto-line)
(global-set-key (kbd "M-o") 'magit-checkout)
(global-set-key (kbd "C-S-w") (lambda ()
                                (interactive)
                                (progn
                                  (message "Copying region as kill")
                                  (call-interactively 'copy-region-as-kill))))

(global-set-key (kbd "C-S-k") (lambda ()
                                (interactive)
                                (progn
                                  (message "Copying line as kill")
                                  (save-excursion
                                    (let ((start (point)))
                                      (end-of-line)
                                      (let ((end (point)))
                                        (copy-region-as-kill start end)))))))


(setq org-agenda-files '("~/org"))


(require 'python)
(setq python-shell-interpreter "ipython")
(setq python-shell-interpreter-args "--pylab")


(menu-bar-mode 0)
(set-scroll-bar-mode nil)
